{"version":3,"sources":["components/Pics/1.jpg","components/Pics/2.jpg","components/Pics/3.jpg","components/Pics/4.jpg","components/Pics/5.jpg","components/Pics/6.jpg","components/Pics/7.jpg","components/Pics/8.jpg","components/Pics/9.jpg","components/Wrapper.js","components/Header.js","components/Pics/Pics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","children","Header","picArray","pic1","pic2","pic3","pic4","pic5","pic6","pic7","pic8","pic9","Pics","state","score","wins","loses","usedPics","renderImage","prop","key","src","alt","width","height","onClick","scoreCount","bind","renderImages","map","event","preventDefault","indexOf","setState","push","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,+JCM5BC,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,aAAaD,EAAME,WCS5BC,MAVf,WACE,OACE,6BACE,2CACA,mDACA,iE,kMCIAC,EAAW,CAACC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,KA6EnDC,E,2MAzEXC,MAAQ,CACNC,MAAO,EACPC,KAAM,EACNC,MAAO,EACPC,SAAS,I,EAGXC,YAAc,SAACC,GAEX,OACI,yBAAKpB,UAAY,MAAMqB,IAAKD,GACxB,yBAAKE,IAAKF,EAAMG,IAAI,SAASC,MAAM,MAAMC,OAAO,MAAMC,QAAS,EAAKC,WAAWC,KAAhB,eAA2BR,O,EAKtGS,aAAe,kBAAM1B,EAAS2B,IAAI,EAAKX,c,EAEvCQ,WAAa,SAACP,EAAMW,GAEhBA,EAAMC,iBAEH,EAAKlB,MAAMI,SAASe,QAAQb,IAAO,EAClC,EAAKc,SAAU,CACXnB,MAAO,EACPE,MAAO,EAAKH,MAAMG,MAAM,EACxBC,SAAS,MAId,EAAKJ,MAAMI,SAASiB,KAAKf,GACzB,EAAKc,SAAU,CACXnB,MAAO,EAAKD,MAAMC,MAAM,IAEL,IAAnB,EAAKD,MAAMC,OACV,EAAKmB,SAAU,CACXnB,MAAO,EACPC,KAAM,EAAKF,MAAME,KAAK,EACtBE,SAAS,MASrB,IAJA,IACIkB,EACAC,EAFAC,EAAenC,EAASoC,OAIrB,IAAMD,GAETD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEzCF,EAAiBjC,EADjBmC,GAAgB,GAEhBnC,EAASmC,GAAgBnC,EAASkC,GAClClC,EAASkC,GAAeD,EAE5B,OAAOjC,G,wEAIP,OACI,yBAAKH,UAAU,aACX,4CAAkB2C,KAAK7B,MAAMC,OAC7B,sCAAY4B,KAAK7B,MAAME,MACvB,uCAAa2B,KAAK7B,MAAMG,OACxB,6BACA,yBAAKjB,UAAU,OACV2C,KAAKd,qB,GApEPe,aCEJC,MATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.32292674.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.b97d1f33.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.35ac4048.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.a7d693df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.3bc4ab14.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1713b4d2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.184a8bf6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.7cf87038.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.b66c4914.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.a4d8822f.jpg\";","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div>\n      <h1>Clicky Game</h1>\n      <h2>Look at the puppies</h2>\n      <h3>Click on each puppy once to win</h3>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\r\nimport pic1 from \"./1.jpg\"\r\nimport pic2 from \"./2.jpg\"\r\nimport pic3 from \"./3.jpg\"\r\nimport pic4 from \"./4.jpg\"\r\nimport pic5 from \"./5.jpg\"\r\nimport pic6 from \"./6.jpg\"\r\nimport pic7 from \"./7.jpg\"\r\nimport pic8 from \"./8.jpg\"\r\nimport pic9 from \"./9.jpg\"\r\n\r\nconst picArray = [pic1, pic2, pic3, pic4, pic5, pic6, pic7, pic8, pic9]\r\n\r\nclass Pics extends Component {\r\n\r\n    state = {\r\n      score: 0,\r\n      wins: 0,\r\n      loses: 0,\r\n      usedPics:[]\r\n    };\r\n\r\n    renderImage = (prop) =>{\r\n        \r\n        return (\r\n            <div className = \"col\" key={prop}>\r\n                <img src={prop} alt=\"flower\" width=\"250\" height=\"250\" onClick={this.scoreCount.bind(this, prop)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderImages = () => picArray.map(this.renderImage)\r\n    \r\n    scoreCount = (prop, event) =>{\r\n\r\n        event.preventDefault();\r\n        \r\n        if(this.state.usedPics.indexOf(prop)>-1){\r\n            this.setState ({\r\n                score: 0,\r\n                loses: this.state.loses+1,\r\n                usedPics:[]\r\n            })\r\n        }\r\n        else{\r\n           this.state.usedPics.push(prop)\r\n           this.setState ({\r\n               score: this.state.score+1\r\n            })\r\n            if(this.state.score===8){\r\n                this.setState ({\r\n                    score: 0,\r\n                    wins: this.state.wins+1,\r\n                    usedPics:[]\r\n                })\r\n            }\r\n        }\r\n        \r\n        let currentIndex = picArray.length\r\n        let temporaryValue\r\n        let randomIndex\r\n\r\n        while (0 !== currentIndex) {\r\n\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = picArray[currentIndex];\r\n            picArray[currentIndex] = picArray[randomIndex];\r\n            picArray[randomIndex] = temporaryValue;\r\n        }\r\n        return picArray;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div>Your score: {this.state.score}</div>\r\n                <div>Wins: {this.state.wins}</div>\r\n                <div>Loses: {this.state.loses}</div>\r\n                <br />\r\n                <div className=\"row\">\r\n                    {this.renderImages()}\r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Pics;","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\"\nimport Header from \"./components/Header\"\nimport Pics from \"./components/Pics/Pics\"\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header />\n      <Pics />\n    </Wrapper>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}